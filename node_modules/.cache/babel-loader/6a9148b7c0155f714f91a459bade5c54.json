{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"input\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", null, \"Enter the text you want to correct.\", -1\n/* HOISTED */\n);\n\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createCommentVNode(\" <ul>\\n      <div v-for=\\\"post in posts\\\" v-bind:key=\\\"post.id\\\">\\n        {{post}}\\n      </div>  \\n    </ul> \"), _createCommentVNode(\" the text correction\"), _hoisted_2, _createElementVNode(\"input\", {\n    type: \"text\",\n    value: $props.modelValue,\n    onInput: _cache[0] || (_cache[0] = $event => _ctx.$emit('update:modelValue', $event.target.value))\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_3), _createElementVNode(\"input\", {\n    type: \"submit\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.submit && $options.submit(...args))\n  })]), _createTextVNode(\" \" + _toDisplayString($data.test), 1\n  /* TEXT */\n  )], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;;;gCAOTC,oBAA8C,KAA9C,EAA8C,IAA9C,EAAK,qCAAL,EAAwC;AAAA;AAAxC;;;;6DAPFA,oBAUQ,KAVR,cAUQ,CATNC,sIASM,EAJVA,2CAIU,EAHNC,UAGM,EAFFF,oBAAiG,OAAjG,EAAiG;IAA1FG,IAAI,EAAC,MAAqF;IAA7EC,KAAK,EAAEC,iBAAsE;IAAzDC,OAAK,sCAAEC,WAAK,mBAAL,EAA2BC,MAAM,CAACC,MAAP,CAAcL,KAAzC,CAAF;EAAoD,CAAjG;;EAAA,aAEE,EADFJ,oBAAqC,OAArC,EAAqC;IAA9BG,IAAI,EAAC,QAAyB;IAAfO,OAAK,yCAAEC,2CAAF;EAAU,CAArC,CACE,CAVR,oBAUQ,MACNC,iBAAEC,UAAF,GAAM;EAAA","names":["class","_createElementVNode","_createCommentVNode","_hoisted_2","type","value","$props","onInput","_ctx","$event","target","onClick","$options","_toDisplayString","$data"],"sourceRoot":"","sources":["/Users/fareskerkeni/Desktop/vue/spell_checker/src/components/input.vue"],"sourcesContent":["<template>\n  <div class=\"input\">\n    <!-- <ul>\n      <div v-for=\"post in posts\" v-bind:key=\"post.id\">\n        {{post}}\n      </div>  \n    </ul> -->\n<!-- the text correction--> \n    <div>Enter the text you want to correct.</div>\n        <input type=\"text\" :value=\"modelValue\" @input=\"$emit('update:modelValue', $event.target.value)\"/>\n        <input type=\"submit\" @click=\"submit\">\n    </div>\n    {{test}}\n</template>\n\n<script>\n/* eslint-disable no-mixed-spaces-and-tabs */\nimport axios from 'axios'\nexport default {\n    name: 'input_user',\n    props:{\n        modelValue: String\n    },\n    data(){\n        return{\n            test: '',\n            comp: 0,\n            suggestions:[],\n        }\n    },\n    created(){\n      axios.get()\n      \n     },\n    methods:{\n        submit: function(){\n            this.test+=this.modelValue\n            this.api()\n            this.change_text(this.text)\n           \n        },\n        change_text: function(texte){\n\n        },\n        api: function(){\n            const axios = require(\"axios\");\n            const options = {\n              method: 'POST',\n              url: 'https://jspell-checker.p.rapidapi.com/check',\n              headers: {\n                'content-type': 'application/json',\n                'X-RapidAPI-Key': 'b99b6429b8msh5b66ff41fd65591p1c52f0jsn03117ac8e6dc',\n                'X-RapidAPI-Host': 'jspell-checker.p.rapidapi.com'\n              },\n              data: '{\"language\":\"frFR\",\"fieldvalues\":\"1\",\"config\":{\"forceUpperCase\":false,\"ignoreIrregularCaps\":false,\"ignoreFirstCaps\":true,\"ignoreNumbers\":true,\"ignoreUpper\":false,\"ignoreDouble\":false,\"ignoreWordsWithNumbers\":true}}'\n            };\n            //modification de la valeur \n            options.data=options.data.replace('1', this.test);\n            \n            axios.request(options).then(function (response) {\n                //const suggestions=response.data.elements[0].errors[0].suggestions\n                const errors = response.data.elements[0].errors\n                var copie = [];\n                errors.forEach(element => copie.push(element.word));\n                errors.forEach(element => console.log(element.suggestions));\n                console.log(copie)\n                \n                // console.log(errors)\n\n                // console.log(suggestions)\n            }).catch(function (error) {\n\t            \n                console.error(error);\n                \n            });\n           \n        }\n    }\n};\n\n</script>\n\n<style lang=\"scss\">\n.input{\n    form{\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        margin: 20px 0 20px 0;\n        .text{\n            width: 600px;\n            height: 500px;\n        }\n        .input{\n            margin: 20px 0 20px 0;\n        }\n    }\n}\n</style>"]},"metadata":{},"sourceType":"module"}