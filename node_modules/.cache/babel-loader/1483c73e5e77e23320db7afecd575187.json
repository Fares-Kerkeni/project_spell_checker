{"ast":null,"code":"/* eslint-disable no-mixed-spaces-and-tabs */\nimport axios from 'axios';\nexport default {\n  name: 'input_user',\n  props: {\n    modelValue: String\n  },\n\n  data() {\n    return {\n      test: '',\n      comp: 0,\n      splits: [],\n      errors_copie: [\"ddd\"]\n    };\n  },\n\n  created() {\n    axios.get();\n  },\n\n  methods: {\n    submit: function () {\n      //stocker le text utilisateur\n      this.test += this.modelValue; //tranformation en tableau\n\n      this.splits = this.test.split(\" \");\n      console.log(this.splits);\n      this.api();\n      console.log(this.copie);\n    },\n    // change_text: function(texte){\n    //     var splits = texte.split(\" \", 3);\n    //     console.log(\"re\")\n    //     return splits\n    // },\n    api: function () {\n      const axios = require(\"axios\");\n\n      const options = {\n        method: 'POST',\n        url: 'https://jspell-checker.p.rapidapi.com/check',\n        headers: {\n          'content-type': 'application/json',\n          'X-RapidAPI-Key': 'b99b6429b8msh5b66ff41fd65591p1c52f0jsn03117ac8e6dc',\n          'X-RapidAPI-Host': 'jspell-checker.p.rapidapi.com'\n        },\n        data: '{\"language\":\"frFR\",\"fieldvalues\":\"1\",\"config\":{\"forceUpperCase\":false,\"ignoreIrregularCaps\":false,\"ignoreFirstCaps\":true,\"ignoreNumbers\":true,\"ignoreUpper\":false,\"ignoreDouble\":false,\"ignoreWordsWithNumbers\":true}}'\n      }; //modification de la valeur de data\n\n      options.data = options.data.replace('1', this.test);\n      axios.request(options).then(function (response) {\n        //const suggestions=response.data.elements[0].errors[0].suggestions\n        //recuperation erreur utilisateur\n        const errors = response.data.elements[0].errors;\n        var copie = [];\n        errors.forEach(element => copie.push(element.word)); // errors.forEach(element => console.log(element.suggestions));\n\n        return copie; // console.log(errors)\n        // console.log(suggestions)\n      }).catch(function (error) {\n        console.error(error);\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"AAyBA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,eAAe;EACXC,IAAI,EAAE,YADK;EAEXC,KAAK,EAAC;IACFC,UAAU,EAAEC;EADV,CAFK;;EAKXC,IAAI,GAAE;IACF,OAAM;MACFC,IAAI,EAAE,EADJ;MAEFC,IAAI,EAAE,CAFJ;MAGFC,MAAM,EAAC,EAHL;MAIFC,YAAY,EAAC,CAAC,KAAD;IAJX,CAAN;EAMH,CAZU;;EAaXC,OAAO,GAAE;IACPV,KAAK,CAACW,GAAN;EACD,CAfU;;EAgBXC,OAAO,EAAC;IACJC,MAAM,EAAE,YAAU;MACd;MACA,KAAKP,IAAL,IAAW,KAAKH,UAAhB,CAFc,CAGd;;MACA,KAAKK,MAAL,GAAc,KAAKF,IAAL,CAAUQ,KAAV,CAAgB,GAAhB,CAAd;MACAC,OAAO,CAACC,GAAR,CAAY,KAAKR,MAAjB;MACA,KAAKS,GAAL;MACAF,OAAO,CAACC,GAAR,CAAY,KAAKE,KAAjB;IAEH,CAVG;IAWJ;IACA;IACA;IACA;IACA;IACAD,GAAG,EAAE,YAAU;MACX,MAAMjB,KAAI,GAAImB,OAAO,CAAC,OAAD,CAArB;;MACA,MAAMC,OAAM,GAAI;QACdC,MAAM,EAAE,MADM;QAEdC,GAAG,EAAE,6CAFS;QAGdC,OAAO,EAAE;UACP,gBAAgB,kBADT;UAEP,kBAAkB,oDAFX;UAGP,mBAAmB;QAHZ,CAHK;QAQdlB,IAAI,EAAE;MARQ,CAAhB,CAFW,CAYX;;MAEAe,OAAO,CAACf,IAAR,GAAae,OAAO,CAACf,IAAR,CAAamB,OAAb,CAAqB,GAArB,EAA0B,KAAKlB,IAA/B,CAAb;MAEAN,KAAK,CAACyB,OAAN,CAAcL,OAAd,EAAuBM,IAAvB,CAA4B,UAAUC,QAAV,EAAoB;QAC5C;QACA;QACA,MAAMC,MAAK,GAAID,QAAQ,CAACtB,IAAT,CAAcwB,QAAd,CAAuB,CAAvB,EAA0BD,MAAzC;QACA,IAAIV,KAAI,GAAI,EAAZ;QAEAU,MAAM,CAACE,OAAP,CAAeC,OAAM,IAAKb,KAAK,CAACc,IAAN,CAAWD,OAAO,CAACE,IAAnB,CAA1B,EAN4C,CAO5C;;QAMA,OAAOf,KAAP,CAb4C,CAkB5C;QAEA;MACH,CArBD,EAqBGgB,KArBH,CAqBS,UAAUC,KAAV,EAAiB;QAEtBpB,OAAO,CAACoB,KAAR,CAAcA,KAAd;MAEH,CAzBD;IA2BJ;EA3DI;AAhBG,CAAf","names":["axios","name","props","modelValue","String","data","test","comp","splits","errors_copie","created","get","methods","submit","split","console","log","api","copie","require","options","method","url","headers","replace","request","then","response","errors","elements","forEach","element","push","word","catch","error"],"sourceRoot":"","sources":["/Users/fareskerkeni/Desktop/vue/spell_checker/src/components/input.vue"],"sourcesContent":["<template>\n  \n   \n<!-- the text correction--> \n<div class=\"all\">\n       <div>Enter the text you want to correct.</div>\n    <input type=\"text\" :value=\"modelValue\" @input=\"$emit('update:modelValue', $event.target.value)\"/>\n    <input type=\"submit\" @click=\"submit\">\n    \n    <div class=\"words\">\n        \n        <div class=\"error_word\" v-for=\"post in  splits \" v-bind:key=\"post.id\" >\n            {{post}}\n        </div> \n    </div>\n    <div>\n        {{errors_copie}}\n    </div>\n</div>\n \n    \n    \n</template>\n\n<script>\n/* eslint-disable no-mixed-spaces-and-tabs */\nimport axios from 'axios'\nexport default {\n    name: 'input_user',\n    props:{\n        modelValue: String\n    },\n    data(){\n        return{\n            test: '',\n            comp: 0,\n            splits:[],\n            errors_copie:[\"ddd\"]\n        }\n    },\n    created(){\n      axios.get()\n    },\n    methods:{\n        submit: function(){\n            //stocker le text utilisateur\n            this.test+=this.modelValue\n            //tranformation en tableau\n            this.splits = this.test.split(\" \");\n            console.log(this.splits)\n            this.api()\n            console.log(this.copie)\n            \n        },\n        // change_text: function(texte){\n        //     var splits = texte.split(\" \", 3);\n        //     console.log(\"re\")\n        //     return splits\n        // },\n        api: function(){\n            const axios = require(\"axios\");\n            const options = {\n              method: 'POST',\n              url: 'https://jspell-checker.p.rapidapi.com/check',\n              headers: {\n                'content-type': 'application/json',\n                'X-RapidAPI-Key': 'b99b6429b8msh5b66ff41fd65591p1c52f0jsn03117ac8e6dc',\n                'X-RapidAPI-Host': 'jspell-checker.p.rapidapi.com'\n              },\n              data: '{\"language\":\"frFR\",\"fieldvalues\":\"1\",\"config\":{\"forceUpperCase\":false,\"ignoreIrregularCaps\":false,\"ignoreFirstCaps\":true,\"ignoreNumbers\":true,\"ignoreUpper\":false,\"ignoreDouble\":false,\"ignoreWordsWithNumbers\":true}}'\n            };\n            //modification de la valeur de data\n\n            options.data=options.data.replace('1', this.test);\n            \n            axios.request(options).then(function (response) {\n                //const suggestions=response.data.elements[0].errors[0].suggestions\n                //recuperation erreur utilisateur\n                const errors = response.data.elements[0].errors\n                var copie = [];\n                \n                errors.forEach(element => copie.push(element.word));\n                // errors.forEach(element => console.log(element.suggestions));\n                \n               \n                \n                \n                \n                return copie\n               \n            \n               \n                \n                // console.log(errors)\n\n                // console.log(suggestions)\n            }).catch(function (error) {\n\t            \n                console.error(error);\n                \n            });\n           \n        }\n    }\n};\n\n</script>\n\n<style lang=\"scss\">\n.all{\n    display: flex;\n   \n    align-items: center;\n    justify-content: start;\n    flex-direction: column;\n   \n    .words{\n        width: 500px;\n        height: 500px;\n        border: solid black;\n        margin: 50px;\n        \n        flex-direction: row;\n    .error_word{\n       margin: 0;\n      \n    \n    }\n}\n   \n}\n\n\n</style>"]},"metadata":{},"sourceType":"module"}